from pickletools import read_float8
from turtle import pen
import aiogram
from aiogram import *
from aiogram import Bot, Dispatcher, executor, types
import logging
import configparser
import markups as nav
import var as v
import time
import os
import random
import re

admin = '925356318'
ref_file_name = "referals.txt"
dref_file_name = "dreferals.txt"



config = configparser.ConfigParser()
config.read("config.ini")
API_TOKEN = config.items("BOT")[0][1]
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

start_dir = os.getcwd()

# @dp.message_handler(content_types=['text'])
# async def echo(message: types.Message):
#   await bot.send_message(message.chat.id, message.text)


# def create_instruction():
    # referals = open(TEMP_folder + "\\!!!.txt","w+")
    # referals.write("ref = ")  ############################################     –ó–ê–ü–û–õ–ù–ò–¢–¨

@dp.message_handler(commands=['start'])
async def startcom(message: types.Message):
	id_usera = message["from"]["id"]
	check_dir = os.getcwd()
	users_dir = "\\users\\"
	directoriya = str(check_dir) + str(users_dir)
	try:
		os.chdir(directoriya)
		os.mkdir(str(id_usera))
		os.chdir(str(id_usera))
		#
		directoriya_ref_user = directoriya + str(id_usera)
		randomizer = int(id_usera) * int(id_usera)
		randomizer2 = int(id_usera) * int(id_usera) + int(id_usera)
		ref_rand = str(random.randrange(randomizer, randomizer2))
		referals = open(directoriya_ref_user + "\\referals.txt","w+")
		referals.write("Ref_code = " + ref_rand + "_" + str(id_usera) +  "\nValue_referals = 0\nBonus = 0")
		referals.close()
		referals = open(directoriya_ref_user + "\\dreferals.txt","w+")
		referals.close()
		await message.answer("–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
		os.chdir(start_dir)
	except:
		os.chdir(directoriya)
		check_dir2 = os.getcwd()
		await message.answer("–¢—ã —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∞–Ω")
		os.chdir(start_dir)

#------------------------------------------------------------------------------
		# directoriya_ref_user = directoriya + str(id_usera) + "\\"
		# with open(directoriya_ref_user + '\\referals.txt') as f:
		# 	lines = f.readlines()
		# 	lines2 = lines[0]
		# 	lines3 = lines2.replace('Ref_code = ', '')
		# 	lines4 = lines3.split("_")
		# 	lines3 = lines4[1]
		# 	lines3 = lines3.replace('\n', '') # - ID_USER–ê
		# 	lines4 = lines4[0] # - ReferalKA
#------------------------------------------------------------------------------

@dp.message_handler(commands=['ref'])
async def referalka(message: types.Message):
	usr_name_or_name = "@" + message.from_user.username if message.from_user.username is not None else message.from_user.full_name
	message_ref = message.text.replace('/ref ', '')
	id_usera_ref = message["from"]["id"]
	id_usera_new = id_usera_ref
	users_dir = "\\users\\"
	check_dir = os.getcwd()
	try:
		lines = message_ref
		lines4 = lines.split("_")
		lines3 = lines4[1]
		iddd = lines3 # - ID usera
		id_usera = lines3
		directoriya = str(check_dir) + str(users_dir)
		directoriya_ref_user = directoriya + str(id_usera) + "\\"
		lines4 = lines4[0] # - ReferalKA
		os.chdir(directoriya_ref_user)
		f = open(directoriya_ref_user + '\\' + ref_file_name, 'r')
		send_ref = lines4
		lines = f.readlines()
		lines2 = lines[0]
		lines3 = lines2.replace('Ref_code = ', '')
		lines4 = lines3.split("_")
		lines4 = lines4[0] # - ReferalKA
		my_ref = lines4 # - —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞_usera_Nachalo
		# print(my_ref)
	
		f.close()
		#directoriyad = directoriya + lines6 + '\\'

		if my_ref == send_ref:
			f = open(directoriya_ref_user + dref_file_name, 'r')
			lineses = f.readlines()
			f.close()
			if lineses != []:
				for reslines in lineses:
					reslines = reslines.split("\n")
					if int(id_usera_new) == int(reslines[0]):
						await bot.send_message(id_usera_new, '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª')
					else:
						pass
			else:
				f = open(directoriya_ref_user + '\\' + ref_file_name, 'r')
				lines = f.readlines()
				Value_referals = lines[1]
				Bonus = lines[2]
				Bonus1 = Bonus.split(" ")
				Bonus1 = int(Bonus[-1]) + 1
				Value_referals1 = Value_referals.split(" ")
				Value_referals1 = int(Value_referals1[-1]) + 1
					#Value_referals1    –ò–ù–¢–û–í–û–ï –ß–ò–°–õ–û –ë–û–ù–£–°–ê
					#lines2  –ü–û–õ–ù–´–ô –†–ï–§–ï–†–ê–õ –° —Ä–µ—Ñ_–∫–æ–¥–µ
				f.close()
				f = open(directoriya_ref_user + '\\' + ref_file_name, 'w')
				f.write(lines2 + "Value_referals = " + str(Value_referals1) + '\nBonus = ' + str(Bonus1))    #id_usera_ref
				await bot.send_message(iddd, usr_name_or_name + ', –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É. –£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: ' + str(Value_referals1) + ' —Ä–µ—Ñ–µ—Ä–∞–ª(–æ–≤)' + '. \n' + str(Bonus1))
				f.close()
				f = open(directoriya_ref_user + '\\' + dref_file_name, 'a')
				f.write(str(id_usera_new) + '\n')
				f.close()
				os.chdir(directoriya + str(id_usera_new))
				f = open(ref_file_name, 'r')
				lines = f.readlines()
				Value_referals = lines[1]
				Value_referals4 = lines[0]
				Bonus = lines[2]
				Bonus1 = Bonus.split(" ")
				Bonus1 = int(Bonus[-1]) + 1
				# Bonus1 = int(Bonus) + 
				Value_referals1 = Value_referals.split(" ")
				Value_referals1 = int(Value_referals1[-1]) + 1
				f.close()
				f = open(ref_file_name, 'w')
				f.write(str(Value_referals4) + "Value_referals = " + str(Value_referals1) + '\nBonus = ' + str(Bonus1)) 
				await bot.send_message(id_usera_new, '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å . –£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: ' + str(Bonus1) + ' –±–æ–Ω—É—Å(–æ–≤)')
				f.close()    #id_usera_ref







		else:
			await message.answer("–¢–∞–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏ –Ω–µ—Ç")
	except aiogram.utils.exceptions.BotBlocked as fbn:


		pass
	except FileNotFoundError as exc:
		await message.answer("–í–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞")
	os.chdir(start_dir)


# my_st = "–ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ Python"
# print(my_st.split("_"))





# n = (
#     "@" + message.from_user.username
#     if message.from_user.username is not None
#     else message.from_user.full_name
# )
# await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å " + t + ". –Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ö–æ–º–ø—å—Ç–µ—Ä–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤–∞ –í–ª–∞–¥–∞ –∏ –í–∞–Ω–∏. \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.", reply_markup = nav.MainMenu)

  #for result in os.list('users')
  #os.



@dp.message_handler(commands=['buy'])
async def buy_srvc(message: types.Message):
	msgs = message.text.replace('/buy ', '')
	await bot.send_message(message.chat.id, '–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞')
	t = "@" + message.from_user.username if message.from_user.username is not None else message.from_user.full_name
	await bot.send_message(admin, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + t + ' –Ω–∞–ø–∏—Å–∞–ª: ' + msgs + '   –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ /accept –∏–ª–∏ /deny')
	await bot.send_message(admin, '/accept ' + str(message.chat.id))
	await bot.send_message(admin, '/deny ' + str(message.chat.id))






@dp.message_handler(commands=['accept'])
async def accept_buy(message: types.Message):
	msgi = message.text
	msgi = msgi.replace('/accept ', '')
	#t = "@" + message.from_user.username if message.from_user.username is not None else message.from_user.full_name
	await bot.send_message(admin, '–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø–æ –∞–π–¥–∏: ' + str(msgi))
	await bot.send_message(msgi, '–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –æ–∂–∏–¥–∞–π—Ç–µ.... –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.')



@dp.message_handler(commands=['deny'])
async def deny_buy(message: types.Message):
	msgi = message.text
	msgi = msgi.replace('/deny ', '')
	await bot.send_message(msgi, '–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –û—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')


@dp.message_handler()
async def bot_msg(message: types.Message):
  if message.text == 'üá∫üá¶ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π':
    v.lang = 'ukr'
    await bot.send_message(message.chat.id, '–û–±—Ä–æ–±–ª—è—é....', reply_markup=types.ReplyKeyboardRemove())
    time.sleep(1)
    await bot.delete_message(message.chat.id, message.message_id+1)
    await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä —è —Ä–æ–∑–º–æ–≤–ª—è—é –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é üíôüíõ', reply_markup = nav.MainMenu1)
  elif message.text == 'üá∑üá∫ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –†–æ—Å—ñ–π—Å—å–∫—É':
  	v.lang = 'ukr'
  	await bot.send_message(message.chat.id, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é....', reply_markup=types.ReplyKeyboardRemove())
  	time.sleep(1)
  	await bot.delete_message(message.chat.id, message.message_id+1)
  	await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å —è —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º üíôüíõ', reply_markup = nav.MainMenu)
  elif message.text == 'üî∏ –û –Ω–∞—Å':
  	await bot.send_message(message.chat.id, v.about_us)
  elif message.text == 'üî∏ –ü—Ä–æ –Ω–∞—Å':
  	await bot.send_message(message.chat.id, v.about_us_u)

  elif message.text == '‚ùî –í–æ–ø—Ä–æ—Å—ã/–û—Ç–≤–µ—Ç—ã':
  	await bot.send_message(message.chat.id, '‚ùî –í–æ–ø—Ä–æ—Å—ã/–û—Ç–≤–µ—Ç—ã', reply_markup = nav.OtherMenu)

  elif message.text == '‚ùî –ü–∏—Ç–∞–Ω–Ω—è/–í—ñ–¥–ø–æ–≤—ñ–¥—ñ':
  	await bot.send_message(message.chat.id, '‚ùî –ü–∏—Ç–∞–Ω–Ω—è/–í—ñ–¥–ø–æ–≤—ñ–¥—ñ', reply_markup = nav.OtherMenu1)

  elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
  	await bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = nav.MainMenu)
  elif message.text == '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
  	await bot.send_message(message.chat.id, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup = nav.MainMenu1)

  #-0-----------0-0-0--0---–ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É-----0---0-0-0--0-0-0-0-
  elif message.text == 'üõí –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É/—É—Å–ª—É–≥–∏':
  	await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ /buy –∏ –∫–∞–∫—É—é —Ä–∞–±–æ—Ç—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –≤ –∫–æ–Ω—Ü–µ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ –±—ã —É –≤–∞—Å –±—ã–ª –Æ–ó–ï–†–ù–≠–ô–ú –Ω–∞–ø—Ä–∏–º–µ—Ä: @VLD_prod. –í —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –ø—Ä–∏–π–¥—ë—Ç –æ—Ç–≤–µ—Ç (—Å—é–¥–∞) ', reply_markup=types.ReplyKeyboardRemove())
  else:
	  pass






if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=False)